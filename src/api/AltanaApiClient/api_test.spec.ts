/**
 * Altana Atlas API
 * Altana Atlas for Regulatory Risk and Trade Compliance
 *
 * OpenAPI spec version: v1.0.142
 * Contact: engineering@altanatech.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("CompanyApi", () => {
  let instance: api.CompanyApi
  beforeEach(function() {
    instance = new api.CompanyApi(config)
  });

  test("getCompanyById", () => {
    const company_id: string = "company_id_example"
    return expect(instance.getCompanyById(company_id, {})).resolves.toBe(null)
  })
  test("getCompanyEdges", () => {
    const company_id: string = "company_id_example"
    const edge_type: Array<string> = undefined
    const country: Array<string> = undefined
    const trade_direction: string = "trade_direction_example"
    const page: number = 56
    return expect(instance.getCompanyEdges(company_id, edge_type, country, trade_direction, page, {})).resolves.toBe(null)
  })
  test("getCompanyFacilities", () => {
    const company_id: string = "company_id_example"
    const page: number = 56
    return expect(instance.getCompanyFacilities(company_id, page, {})).resolves.toBe(null)
  })
  test("getCompanyProducts", () => {
    const company_id: string = "company_id_example"
    const trade_direction: string = "trade_direction_example"
    const page: number = 56
    return expect(instance.getCompanyProducts(company_id, trade_direction, page, {})).resolves.toBe(null)
  })
  test("getTradingPartners", () => {
    const company_id: string = "company_id_example"
    const page: number = 56
    return expect(instance.getTradingPartners(company_id, page, {})).resolves.toBe(null)
  })
  test("matchCompany", () => {
    const query: string = "query_example"
    const country: Array<string> = undefined
    const full_address: string = "full_address_example"
    const hs2: Array<string> = undefined
    const has_restrictions: boolean = true
    return expect(instance.matchCompany(query, country, full_address, hs2, has_restrictions, {})).resolves.toBe(null)
  })
  test("searchCompany", () => {
    const query: string = "query_example"
    const country: Array<string> = undefined
    const hs2: Array<string> = undefined
    const has_restrictions: boolean = true
    const page: number = 56
    return expect(instance.searchCompany(query, country, hs2, has_restrictions, page, {})).resolves.toBe(null)
  })
})

describe("FacilityApi", () => {
  let instance: api.FacilityApi
  beforeEach(function() {
    instance = new api.FacilityApi(config)
  });

  test("getFacilityById", () => {
    const facility_id: string = "facility_id_example"
    return expect(instance.getFacilityById(facility_id, {})).resolves.toBe(null)
  })
  test("getFacilityProducts", () => {
    const facility_id: string = "facility_id_example"
    const trade_direction: string = "trade_direction_example"
    const page: number = 56
    return expect(instance.getFacilityProducts(facility_id, trade_direction, page, {})).resolves.toBe(null)
  })
  test("getFacilityTradingPartners", () => {
    const facility_id: string = "facility_id_example"
    const page: number = 56
    return expect(instance.getFacilityTradingPartners(facility_id, page, {})).resolves.toBe(null)
  })
  test("matchFacility", () => {
    const company_name: string = "company_name_example"
    const full_address: string = "full_address_example"
    return expect(instance.matchFacility(company_name, full_address, {})).resolves.toBe(null)
  })
  test("searchFacility", () => {
    const full_address: string = "full_address_example"
    const company_name: string = "company_name_example"
    const page: number = 56
    return expect(instance.searchFacility(full_address, company_name, page, {})).resolves.toBe(null)
  })
})

describe("ProductApi", () => {
  let instance: api.ProductApi
  beforeEach(function() {
    instance = new api.ProductApi(config)
  });

  test("getProductById", () => {
    const product_id: string = "product_id_example"
    return expect(instance.getProductById(product_id, {})).resolves.toBe(null)
  })
  test("getProductCompanies", () => {
    const product_id: string = "product_id_example"
    const trade_direction: string = "trade_direction_example"
    const page: number = 56
    return expect(instance.getProductCompanies(product_id, trade_direction, page, {})).resolves.toBe(null)
  })
  test("getProductFacilities", () => {
    const product_id: string = "product_id_example"
    const trade_direction: string = "trade_direction_example"
    const page: number = 56
    return expect(instance.getProductFacilities(product_id, trade_direction, page, {})).resolves.toBe(null)
  })
})

describe("StatusApi", () => {
  let instance: api.StatusApi
  beforeEach(function() {
    instance = new api.StatusApi(config)
  });

  test("getStatus", () => {
    return expect(instance.getStatus({})).resolves.toBe(null)
  })
})

describe("TransactionApi", () => {
  let instance: api.TransactionApi
  beforeEach(function() {
    instance = new api.TransactionApi(config)
  });

  test("transactionRisk", () => {
    const body: api.TransactionRecord = undefined
    return expect(instance.transactionRisk(body, {})).resolves.toBe(null)
  })
})

