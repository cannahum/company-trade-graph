/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Altana Atlas API
 * Altana Atlas for Regulatory Risk and Trade Compliance
 *
 * OpenAPI spec version: v1.0.142
 * Contact: engineering@altanatech.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.altana.ai/atlas/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface BaseEdge
 */
export interface BaseEdge {
    /**
     * 
     * @type {string}
     * @memberof BaseEdge
     */
    edge_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseEdge
     */
    edge_type?: string;
}
/**
 * 
 * @export
 * @interface BaseRisk
 */
export interface BaseRisk {
    /**
     * 
     * @type {number}
     * @memberof BaseRisk
     */
    risk_score?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseRisk
     */
    risk_type?: string;
}
/**
 * 
 * @export
 * @interface Companies
 */
export interface Companies {
    /**
     * A list of company data structures
     * @type {Array<Company>}
     * @memberof Companies
     */
    companies?: Array<Company>;
    /**
     * The total number of results found by the query
     * @type {number}
     * @memberof Companies
     */
    num_results?: number;
    /**
     * Page number of the results
     * @type {number}
     * @memberof Companies
     */
    page_num?: number;
    /**
     * The maximum number of results returned on each page
     * @type {number}
     * @memberof Companies
     */
    page_size?: number;
}
/**
 * Data structure containing information about an entity resolved company
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * Altana generated, entity resolved UUID representing a company
     * @type {string}
     * @memberof Company
     */
    altana_canon_id: string;
    /**
     * 
     * @type {CompanyContext}
     * @memberof Company
     */
    company_context: CompanyContext;
    /**
     * The resolved company name associated with the canon ID
     * @type {string}
     * @memberof Company
     */
    company_name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Company
     */
    data_sources: Array<string>;
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof Company
     */
    restrictions: Array<Restriction>;
    /**
     * 
     * @type {Array<Risk>}
     * @memberof Company
     */
    risks: Array<Risk>;
}
/**
 * 
 * @export
 * @interface CompanyContext
 */
export interface CompanyContext {
    /**
     * A list of Altana Canonical Company Identifiers, representing companies this company sells to
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    buyers: Array<string>;
    /**
     * A list of ISO-2 country codes
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    countries_of_destination: Array<string>;
    /**
     * A list of ISO-2 country codes in which a company owns facilities
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    countries_of_operation?: Array<string>;
    /**
     * A list of ISO-2 country codes
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    countries_of_origin: Array<string>;
    /**
     * A list of HS code section prefixes
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    hs_traded: Array<string>;
    /**
     * A list of industries defined by Altana taxonomy
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    industries: Array<string>;
    /**
     * Number of transaction records associated with this company
     * @type {number}
     * @memberof CompanyContext
     */
    number_records: number;
    /**
     * A list of product IDs that a company receives
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    products_received?: Array<string>;
    /**
     * A list of product IDs that a company sends
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    products_sent?: Array<string>;
    /**
     * A list of Altana Canonical Company Identifiers, representing companies this company buys from
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    suppliers: Array<string>;
    /**
     * A list of Altana Canonical Company Identifiers, representing the joint set of buyers and suppliers
     * @type {Array<string>}
     * @memberof CompanyContext
     */
    trading_partners: Array<string>;
}
/**
 * 
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    longitude?: number;
}
/**
 * 
 * @export
 * @interface DeclaredGoods
 */
export interface DeclaredGoods {
    /**
     * Three character currency abbreviation
     * @type {string}
     * @memberof DeclaredGoods
     */
    currency: string;
    /**
     * Text description of the item being traded
     * @type {string}
     * @memberof DeclaredGoods
     */
    goods_description: string;
    /**
     * Text of the HS6 (or highest available HS level) code
     * @type {string}
     * @memberof DeclaredGoods
     */
    hs_code: string;
    /**
     * Monetary value of the item in the specified currency
     * @type {number}
     * @memberof DeclaredGoods
     */
    value: number;
}
/**
 * 
 * @export
 * @interface Edge
 */
export interface Edge {
}
/**
 * 
 * @export
 * @interface Edges
 */
export interface Edges {
    /**
     * 
     * @type {Array<Edge>}
     * @memberof Edges
     */
    edges?: Array<Edge>;
    /**
     * 
     * @type {number}
     * @memberof Edges
     */
    num_results?: number;
    /**
     * 
     * @type {number}
     * @memberof Edges
     */
    page_num?: number;
    /**
     * 
     * @type {number}
     * @memberof Edges
     */
    page_size?: number;
}
/**
 * 
 * @export
 * @interface Facilities
 */
export interface Facilities {
    /**
     * 
     * @type {Array<Facility>}
     * @memberof Facilities
     */
    facilities?: Array<Facility>;
    /**
     * 
     * @type {number}
     * @memberof Facilities
     */
    num_results?: number;
    /**
     * 
     * @type {number}
     * @memberof Facilities
     */
    page_num?: number;
    /**
     * 
     * @type {number}
     * @memberof Facilities
     */
    page_size?: number;
}
/**
 * 
 * @export
 * @interface Facility
 */
export interface Facility {
    /**
     * The address of this facility
     * @type {string}
     * @memberof Facility
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    address_cosine_similarity?: string;
    /**
     * 
     * @type {string}
     * @memberof Facility
     */
    address_model_output_level?: string;
    /**
     * Altana generated, entity resolved UUID representing a company
     * @type {string}
     * @memberof Facility
     */
    company_canon_id?: string;
    /**
     * 
     * @type {Array<ModelMetaData>}
     * @memberof Facility
     */
    company_model_metadata?: Array<ModelMetaData>;
    /**
     * The resolved company name associated with the company canon ID
     * @type {string}
     * @memberof Facility
     */
    company_name?: string;
    /**
     * 
     * @type {Coordinates}
     * @memberof Facility
     */
    coordinates?: Coordinates;
    /**
     * 
     * @type {Array<string>}
     * @memberof Facility
     */
    data_sources?: Array<string>;
    /**
     * Altana generated, entity resolved UUID representing a facility
     * @type {string}
     * @memberof Facility
     */
    facility_canon_id?: string;
    /**
     * 
     * @type {Array<ModelMetaData>}
     * @memberof Facility
     */
    geo_string_address_model_metadata?: Array<ModelMetaData>;
    /**
     * 
     * @type {Array<GeoCoderMetaData>}
     * @memberof Facility
     */
    geocoder_metadata?: Array<GeoCoderMetaData>;
    /**
     * A list of HS codes that the facility has received
     * @type {Array<string>}
     * @memberof Facility
     */
    hs_received?: Array<string>;
    /**
     * A list of HS codes that the facility has sent
     * @type {Array<string>}
     * @memberof Facility
     */
    hs_sent?: Array<string>;
    /**
     * A list of HS codes that the facility has traded (i.e. sent and received)
     * @type {Array<string>}
     * @memberof Facility
     */
    hs_traded?: Array<string>;
    /**
     * A list of industries defined by Altana taxonomy
     * @type {Array<string>}
     * @memberof Facility
     */
    industries?: Array<string>;
    /**
     * Number of transaction records associated with this facility
     * @type {number}
     * @memberof Facility
     */
    number_records?: number;
    /**
     * A list of product IDs that a facility receives
     * @type {Array<string>}
     * @memberof Facility
     */
    products_received?: Array<string>;
    /**
     * A list of product IDs that a facility sends
     * @type {Array<string>}
     * @memberof Facility
     */
    products_sent?: Array<string>;
    /**
     * A list of facility IDs that this facility receives products from
     * @type {Array<string>}
     * @memberof Facility
     */
    receives_from_facility_ids?: Array<string>;
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof Facility
     */
    restrictions?: Array<Restriction>;
    /**
     * A list of facility IDs that this facility sends products to
     * @type {Array<string>}
     * @memberof Facility
     */
    sends_to_facility_ids?: Array<string>;
    /**
     * 
     * @type {Array<ModelMetaData>}
     * @memberof Facility
     */
    string_address_model_metadata?: Array<ModelMetaData>;
}
/**
 * 
 * @export
 * @interface FacilityTradingPartners
 */
export interface FacilityTradingPartners {
    /**
     * 
     * @type {Array<Edge>}
     * @memberof FacilityTradingPartners
     */
    edges?: Array<Edge>;
    /**
     * 
     * @type {Array<Facility>}
     * @memberof FacilityTradingPartners
     */
    facilities?: Array<Facility>;
    /**
     * 
     * @type {number}
     * @memberof FacilityTradingPartners
     */
    num_results?: number;
    /**
     * 
     * @type {number}
     * @memberof FacilityTradingPartners
     */
    page_num?: number;
    /**
     * 
     * @type {number}
     * @memberof FacilityTradingPartners
     */
    page_size?: number;
}
/**
 * An object containing the the geocoded information used by the model (i.e., output from Arango)
 * @export
 * @interface GeoCoderMetaData
 */
export interface GeoCoderMetaData {
    /**
     * 
     * @type {any}
     * @memberof GeoCoderMetaData
     */
    bbox_geojson_in?: any;
    /**
     * 
     * @type {any}
     * @memberof GeoCoderMetaData
     */
    bbox_geojson_out?: any;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    bbox_size_km2_in?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    bbox_size_km2_out?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    geo_confidence_in?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    geo_confidence_out?: number;
    /**
     * 
     * @type {string}
     * @memberof GeoCoderMetaData
     */
    geo_level_in?: string;
    /**
     * 
     * @type {string}
     * @memberof GeoCoderMetaData
     */
    geo_level_out?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GeoCoderMetaData
     */
    geocoder_metadata_bool?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    latitude_in?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    latitude_out?: number;
    /**
     * 
     * @type {any}
     * @memberof GeoCoderMetaData
     */
    layer_properties_in?: any;
    /**
     * 
     * @type {any}
     * @memberof GeoCoderMetaData
     */
    layer_properties_out?: any;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    longitude_in?: number;
    /**
     * 
     * @type {number}
     * @memberof GeoCoderMetaData
     */
    longitude_out?: number;
}
/**
 * Dictionary containing unit and value data about an item (weight, quantity, size, etc)
 * @export
 * @interface GoodsMeasure
 */
export interface GoodsMeasure {
    /**
     * Unit of the good measurement (in ANSI standard)
     * @type {string}
     * @memberof GoodsMeasure
     */
    unit: string;
    /**
     * Value of the good measurement
     * @type {number}
     * @memberof GoodsMeasure
     */
    value: number;
}
/**
 * 
 * @export
 * @interface HSMisclassificationRisk
 */
export interface HSMisclassificationRisk {
    /**
     * Returns true if the declared HS code and predicted HS code with the highest confidence have the same first two digits (i.e., HS2)
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_declared_hs2_equal_top_1?: boolean;
    /**
     * Returns true if the declared HS code and predicted HS code with the highest confidence have the same first four digits (i.e., HS4)
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_declared_hs4_equal_top_1?: boolean;
    /**
     * Returns true if the declared HS code and predicted HS code with the highest confidence have the same first six digits (i.e., HS6)
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_declared_hs6_equal_top_1?: boolean;
    /**
     * Returns true if the declared HS code and predicted HS code with the highest confidence are the same
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_declared_hs_equal_top_1?: boolean;
    /**
     * Returns true if the declared HS code is one of the top three predicted HS codes, ranked by confidence
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_declared_hs_in_top_3?: boolean;
    /**
     * Returns true if the declared HS code is one of the top five predicted HS codes, ranked by confidence
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_declared_hs_in_top_5?: boolean;
    /**
     * Returns true if the declared HS code and top predicted HS code have different tariff rates associated with them
     * @type {boolean}
     * @memberof HSMisclassificationRisk
     */
    is_tariff_diff_btw_declared_and_top_1?: boolean;
    /**
     * Mean confidence of all predicted HS codes
     * @type {number}
     * @memberof HSMisclassificationRisk
     */
    mean_predicted_confidence?: number;
    /**
     * 
     * @type {Array<PredictedGoods>}
     * @memberof HSMisclassificationRisk
     */
    predicted?: Array<PredictedGoods>;
    /**
     * 
     * @type {number}
     * @memberof HSMisclassificationRisk
     */
    risk_score?: number;
    /**
     * 
     * @type {string}
     * @memberof HSMisclassificationRisk
     */
    risk_type?: string;
    /**
     * Maximum confidence of all predicted HS codes
     * @type {number}
     * @memberof HSMisclassificationRisk
     */
    top_predicted_confidence?: number;
}
/**
 * 
 * @export
 * @interface InterFacilityEdge
 */
export interface InterFacilityEdge extends BaseEdge {
    /**
     * 
     * @type {Array<string>}
     * @memberof InterFacilityEdge
     */
    facility_canon_ids?: Array<string>;
    /**
     * 
     * @type {Array<TradeRelationship>}
     * @memberof InterFacilityEdge
     */
    trade_relationships?: Array<TradeRelationship>;
}
/**
 * An object containing metadata on models used
 * @export
 * @interface ModelMetaData
 */
export interface ModelMetaData {
    /**
     * 
     * @type {number}
     * @memberof ModelMetaData
     */
    match_search_space?: number;
    /**
     * 
     * @type {any}
     * @memberof ModelMetaData
     */
    model_artifact?: any;
    /**
     * 
     * @type {any}
     * @memberof ModelMetaData
     */
    model_features?: any;
    /**
     * 
     * @type {boolean}
     * @memberof ModelMetaData
     */
    model_metadata_bool?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelMetaData
     */
    page_size?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelMetaData
     */
    query_precleaned_indicator?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelMetaData
     */
    temp_que_lower?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMetaData
     */
    temp_res_lower?: string;
}
/**
 * Dictionary containing data about a exporter, importer, or other physically located party to a transaction
 * @export
 * @interface Party
 */
export interface Party {
    /**
     * ISO2 code
     * @type {string}
     * @memberof Party
     */
    country?: string;
    /**
     * Address data (not used for risk calculation)
     * @type {string}
     * @memberof Party
     */
    full_address: string;
    /**
     * UUID of party (not used for risk calculation)
     * @type {string}
     * @memberof Party
     */
    id?: string;
    /**
     * Text name of the party
     * @type {string}
     * @memberof Party
     */
    name: string;
}
/**
 * 
 * @export
 * @interface PredictedGoods
 */
export interface PredictedGoods {
    /**
     * 
     * @type {number}
     * @memberof PredictedGoods
     */
    amount_to_collect?: number;
    /**
     * 
     * @type {number}
     * @memberof PredictedGoods
     */
    confidence?: number;
    /**
     * 
     * @type {string}
     * @memberof PredictedGoods
     */
    hs_code?: string;
    /**
     * 
     * @type {string}
     * @memberof PredictedGoods
     */
    hs_definition?: string;
    /**
     * 
     * @type {Tariff}
     * @memberof PredictedGoods
     */
    tariff?: Tariff;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * The HS codes associated with the product
     * @type {Array<string>}
     * @memberof Product
     */
    hs_codes?: Array<string>;
    /**
     * The name of the product
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     * Number of transaction records associated with the product
     * @type {number}
     * @memberof Product
     */
    number_records?: number;
    /**
     * Altana generated, entity resolved UUID representing a product
     * @type {string}
     * @memberof Product
     */
    product_canon_id?: string;
}
/**
 * 
 * @export
 * @interface Products
 */
export interface Products {
    /**
     * 
     * @type {number}
     * @memberof Products
     */
    num_results?: number;
    /**
     * 
     * @type {number}
     * @memberof Products
     */
    page_num?: number;
    /**
     * 
     * @type {number}
     * @memberof Products
     */
    page_size?: number;
    /**
     * 
     * @type {Array<Product>}
     * @memberof Products
     */
    products?: Array<Product>;
}
/**
 * 
 * @export
 * @interface Restriction
 */
export interface Restriction {
    /**
     * 
     * @type {string}
     * @memberof Restriction
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Restriction
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface Risk
 */
export interface Risk {
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    db_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface Tariff
 */
export interface Tariff {
    /**
     * Rate of Duty (ad valorem)
     * @type {number}
     * @memberof Tariff
     */
    duty?: number;
    /**
     * Environmental Duty (USD)
     * @type {number}
     * @memberof Tariff
     */
    envduty?: number;
    /**
     * Duty rate for countries covered under the EU-Cariforum Economic Partnership Agreement
     * @type {number}
     * @memberof Tariff
     */
    eparate?: number;
    /**
     * Excise Rate (ad valorem)
     * @type {number}
     * @memberof Tariff
     */
    excrate?: number;
    /**
     * Specific Duty (USD)
     * @type {number}
     * @memberof Tariff
     */
    spduty?: number;
    /**
     * Specific Excise (USD)
     * @type {number}
     * @memberof Tariff
     */
    spexc?: number;
}
/**
 * 
 * @export
 * @interface TradeRelationship
 */
export interface TradeRelationship {
    /**
     * A list of ISO-2 country codes
     * @type {Array<string>}
     * @memberof TradeRelationship
     */
    countries_of_destination?: Array<string>;
    /**
     * A list of ISO-2 country codes
     * @type {Array<string>}
     * @memberof TradeRelationship
     */
    countries_of_origin?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TradeRelationship
     */
    exporter_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeRelationship
     */
    exporter_company_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeRelationship
     */
    exporter_company_name?: string;
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof TradeRelationship
     */
    exporter_restrictions?: Array<Restriction>;
    /**
     * A list of HS code section prefixes
     * @type {Array<string>}
     * @memberof TradeRelationship
     */
    hs_traded?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TradeRelationship
     */
    importer_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeRelationship
     */
    importer_company_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeRelationship
     */
    importer_company_name?: string;
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof TradeRelationship
     */
    importer_restrictions?: Array<Restriction>;
    /**
     * A list of industries defined by Altana taxonomy
     * @type {Array<string>}
     * @memberof TradeRelationship
     */
    industries?: Array<string>;
    /**
     * Number of transaction records associated with this edge
     * @type {number}
     * @memberof TradeRelationship
     */
    number_records?: number;
    /**
     * 
     * @type {Array<Risk>}
     * @memberof TradeRelationship
     */
    risks?: Array<Risk>;
}
/**
 * Structure containing data about the country and port of origin and destination
 * @export
 * @interface TradeRoute
 */
export interface TradeRoute {
    /**
     * ISO-2 country code where the route is pointed towards
     * @type {string}
     * @memberof TradeRoute
     */
    country_of_destination: string;
    /**
     * ISO-2 country code where the route is coming from
     * @type {string}
     * @memberof TradeRoute
     */
    country_of_origin: string;
    /**
     * Text name of the destination port
     * @type {string}
     * @memberof TradeRoute
     */
    port_of_destination: string;
    /**
     * Text name of the port of origin
     * @type {string}
     * @memberof TradeRoute
     */
    port_of_origin: string;
}
/**
 * 
 * @export
 * @interface TradingPartnerEdge
 */
export interface TradingPartnerEdge extends BaseEdge {
    /**
     * A list of ISO-2 country codes
     * @type {Array<string>}
     * @memberof TradingPartnerEdge
     */
    countries_of_destination?: Array<string>;
    /**
     * A list of ISO-2 country codes
     * @type {Array<string>}
     * @memberof TradingPartnerEdge
     */
    countries_of_origin?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerEdge
     */
    exporter_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerEdge
     */
    exporter_company_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerEdge
     */
    exporter_company_name?: string;
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof TradingPartnerEdge
     */
    exporter_restrictions?: Array<Restriction>;
    /**
     * A list of HS code section prefixes
     * @type {Array<string>}
     * @memberof TradingPartnerEdge
     */
    hs_traded?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerEdge
     */
    importer_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerEdge
     */
    importer_company_canon_id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradingPartnerEdge
     */
    importer_company_name?: string;
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof TradingPartnerEdge
     */
    importer_restrictions?: Array<Restriction>;
    /**
     * A list of industries defined by Altana taxonomy
     * @type {Array<string>}
     * @memberof TradingPartnerEdge
     */
    industries?: Array<string>;
    /**
     * Number of transaction records associated with this edge
     * @type {number}
     * @memberof TradingPartnerEdge
     */
    number_records?: number;
    /**
     * 
     * @type {Array<Risk>}
     * @memberof TradingPartnerEdge
     */
    risks?: Array<Risk>;
}
/**
 * 
 * @export
 * @interface TradingPartners
 */
export interface TradingPartners {
    /**
     * 
     * @type {Array<Company>}
     * @memberof TradingPartners
     */
    companies?: Array<Company>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof TradingPartners
     */
    edges?: Array<Edge>;
    /**
     * 
     * @type {number}
     * @memberof TradingPartners
     */
    num_results?: number;
    /**
     * 
     * @type {number}
     * @memberof TradingPartners
     */
    page_num?: number;
    /**
     * 
     * @type {number}
     * @memberof TradingPartners
     */
    page_size?: number;
}
/**
 * 
 * @export
 * @interface TradingPartnersEdge
 */
export interface TradingPartnersEdge extends BaseEdge {
    /**
     * 
     * @type {Array<string>}
     * @memberof TradingPartnersEdge
     */
    company_canon_ids?: Array<string>;
    /**
     * 
     * @type {Array<TradeRelationship>}
     * @memberof TradingPartnersEdge
     */
    trade_relationships?: Array<TradeRelationship>;
}
/**
 * A model which contains all of the data necessary to describe and risk score a transaction
 * @export
 * @interface TransactionRecord
 */
export interface TransactionRecord {
    /**
     * 
     * @type {DeclaredGoods}
     * @memberof TransactionRecord
     */
    declared: DeclaredGoods;
    /**
     * 
     * @type {Party}
     * @memberof TransactionRecord
     */
    exporter: Party;
    /**
     * 
     * @type {string}
     * @memberof TransactionRecord
     */
    id: string;
    /**
     * 
     * @type {Party}
     * @memberof TransactionRecord
     */
    importer: Party;
    /**
     * 
     * @type {GoodsMeasure}
     * @memberof TransactionRecord
     */
    quantity: GoodsMeasure;
    /**
     * 
     * @type {TradeRoute}
     * @memberof TransactionRecord
     */
    route: TradeRoute;
    /**
     * 
     * @type {string}
     * @memberof TransactionRecord
     */
    trade_direction: TransactionRecord.TradeDirectionEnum;
    /**
     * 
     * @type {Date}
     * @memberof TransactionRecord
     */
    transaction_date_time: Date;
    /**
     * 
     * @type {GoodsMeasure}
     * @memberof TransactionRecord
     */
    weight: GoodsMeasure;
}

/**
 * @export
 * @namespace TransactionRecord
 */
export namespace TransactionRecord {
    /**
     * @export
     * @enum {string}
     */
    export enum TradeDirectionEnum {
        Import = <any> 'import',
        Export = <any> 'export'
    }
}
/**
 * 
 * @export
 * @interface TransactionRisk
 */
export interface TransactionRisk {
    /**
     * 
     * @type {Array<Risk>}
     * @memberof TransactionRisk
     */
    risks?: Array<Risk>;
}
/**
 * CompanyApi - fetch parameter creator
 * @export
 */
export const CompanyApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Company ID endpoint allows users to search for a company using its canonical Altana ID. The endpoint returns information on the company including the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
         * @summary Company ID
         * @param {string} company_id A company identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById(company_id: string, options: any = {}): FetchArgs {
            // verify required parameter 'company_id' is not null or undefined
            if (company_id === null || company_id === undefined) {
                throw new RequiredError('company_id','Required parameter company_id was null or undefined when calling getCompanyById.');
            }
            const localVarPath = `/company/id/{company_id}`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(company_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Edges endpoint retrieves the links (i.e., edges) associated with a given company in the knowledge graph. Currently these edges describe trade relationships (\"trading_partners\"), while allowing filtering by recipient (\"receives_from\") or sender (\"sends_to\").
         * @summary Edges
         * @param {string} company_id An Altana Canonical Identifier
         * @param {Array<string>} [edge_type] A list of edge_type filters
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {string} [trade_direction] Filter trade-based edges on the direction of the trade
         * @param {number} [page] Page number to return from results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEdges(company_id: string, edge_type?: Array<string>, country?: Array<string>, trade_direction?: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'company_id' is not null or undefined
            if (company_id === null || company_id === undefined) {
                throw new RequiredError('company_id','Required parameter company_id was null or undefined when calling getCompanyEdges.');
            }
            const localVarPath = `/company/id/{company_id}/edges`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(company_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (edge_type) {
                localVarQueryParameter['edge_type'] = edge_type.join(COLLECTION_FORMATS["pipe"]);
            }

            if (country) {
                localVarQueryParameter['country'] = country.join(COLLECTION_FORMATS["pipe"]);
            }

            if (trade_direction !== undefined) {
                localVarQueryParameter['trade_direction'] = trade_direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Company Facilities endpoint retrieves the facilities associated with a given company.
         * @summary Facilities
         * @param {string} company_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFacilities(company_id: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'company_id' is not null or undefined
            if (company_id === null || company_id === undefined) {
                throw new RequiredError('company_id','Required parameter company_id was null or undefined when calling getCompanyFacilities.');
            }
            const localVarPath = `/company/id/{company_id}/facilities`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(company_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Company Products endpoint retrieves the products that a given company sends or receives.
         * @summary Company Products
         * @param {string} company_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter products based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProducts(company_id: string, trade_direction?: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'company_id' is not null or undefined
            if (company_id === null || company_id === undefined) {
                throw new RequiredError('company_id','Required parameter company_id was null or undefined when calling getCompanyProducts.');
            }
            const localVarPath = `/company/id/{company_id}/products`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(company_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (trade_direction !== undefined) {
                localVarQueryParameter['trade_direction'] = trade_direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Trading Partners endpoint allows you to retrieve a paginated list of companies that buy from or sell to the company in question, along with information about those relationships.
         * @summary Trading Partners
         * @param {string} company_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingPartners(company_id: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'company_id' is not null or undefined
            if (company_id === null || company_id === undefined) {
                throw new RequiredError('company_id','Required parameter company_id was null or undefined when calling getTradingPartners.');
            }
            const localVarPath = `/company/id/{company_id}/trading-partners`
                .replace(`{${"company_id"}}`, encodeURIComponent(String(company_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Company Match Endpoint.
         * @summary Company Match
         * @param {string} query A company name
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {string} [full_address] The full address to search for
         * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
         * @param {boolean} [has_restrictions] Filter for companies that have restrictions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCompany(query: string, country?: Array<string>, full_address?: string, hs2?: Array<string>, has_restrictions?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling matchCompany.');
            }
            const localVarPath = `/company/match/{query}`
                .replace(`{${"query"}}`, encodeURIComponent(String(query)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (country) {
                localVarQueryParameter['country'] = country.join(COLLECTION_FORMATS["pipe"]);
            }

            if (full_address !== undefined) {
                localVarQueryParameter['full_address'] = full_address;
            }

            if (hs2) {
                localVarQueryParameter['hs2'] = hs2.join(COLLECTION_FORMATS["pipe"]);
            }

            if (has_restrictions !== undefined) {
                localVarQueryParameter['has_restrictions'] = has_restrictions;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Company Search endpoint allows users to search for companies by name. The endpoint returns the Altana IDs for companies matching that name, ordered by search relevance, as well as information on the company including: the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
         * @summary Company Search
         * @param {string} query A company name, variant, identifier, or query term
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
         * @param {boolean} [has_restrictions] Filter for companies that have restrictions
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCompany(query: string, country?: Array<string>, hs2?: Array<string>, has_restrictions?: boolean, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling searchCompany.');
            }
            const localVarPath = `/company/search/{query}`
                .replace(`{${"query"}}`, encodeURIComponent(String(query)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (country) {
                localVarQueryParameter['country'] = country.join(COLLECTION_FORMATS["pipe"]);
            }

            if (hs2) {
                localVarQueryParameter['hs2'] = hs2.join(COLLECTION_FORMATS["pipe"]);
            }

            if (has_restrictions !== undefined) {
                localVarQueryParameter['has_restrictions'] = has_restrictions;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The Company ID endpoint allows users to search for a company using its canonical Altana ID. The endpoint returns information on the company including the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
         * @summary Company ID
         * @param {string} company_id A company identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById(company_id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Company> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).getCompanyById(company_id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Edges endpoint retrieves the links (i.e., edges) associated with a given company in the knowledge graph. Currently these edges describe trade relationships (\"trading_partners\"), while allowing filtering by recipient (\"receives_from\") or sender (\"sends_to\").
         * @summary Edges
         * @param {string} company_id An Altana Canonical Identifier
         * @param {Array<string>} [edge_type] A list of edge_type filters
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {string} [trade_direction] Filter trade-based edges on the direction of the trade
         * @param {number} [page] Page number to return from results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEdges(company_id: string, edge_type?: Array<string>, country?: Array<string>, trade_direction?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Edges> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).getCompanyEdges(company_id, edge_type, country, trade_direction, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Company Facilities endpoint retrieves the facilities associated with a given company.
         * @summary Facilities
         * @param {string} company_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFacilities(company_id: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Facilities> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).getCompanyFacilities(company_id, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Company Products endpoint retrieves the products that a given company sends or receives.
         * @summary Company Products
         * @param {string} company_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter products based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProducts(company_id: string, trade_direction?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Products> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).getCompanyProducts(company_id, trade_direction, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Trading Partners endpoint allows you to retrieve a paginated list of companies that buy from or sell to the company in question, along with information about those relationships.
         * @summary Trading Partners
         * @param {string} company_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingPartners(company_id: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TradingPartners> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).getTradingPartners(company_id, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Company Match Endpoint.
         * @summary Company Match
         * @param {string} query A company name
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {string} [full_address] The full address to search for
         * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
         * @param {boolean} [has_restrictions] Filter for companies that have restrictions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCompany(query: string, country?: Array<string>, full_address?: string, hs2?: Array<string>, has_restrictions?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Company> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).matchCompany(query, country, full_address, hs2, has_restrictions, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Company Search endpoint allows users to search for companies by name. The endpoint returns the Altana IDs for companies matching that name, ordered by search relevance, as well as information on the company including: the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
         * @summary Company Search
         * @param {string} query A company name, variant, identifier, or query term
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
         * @param {boolean} [has_restrictions] Filter for companies that have restrictions
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCompany(query: string, country?: Array<string>, hs2?: Array<string>, has_restrictions?: boolean, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Companies> {
            const localVarFetchArgs = CompanyApiFetchParamCreator(configuration).searchCompany(query, country, hs2, has_restrictions, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * The Company ID endpoint allows users to search for a company using its canonical Altana ID. The endpoint returns information on the company including the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
         * @summary Company ID
         * @param {string} company_id A company identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById(company_id: string, options?: any) {
            return CompanyApiFp(configuration).getCompanyById(company_id, options)(fetch, basePath);
        },
        /**
         * The Edges endpoint retrieves the links (i.e., edges) associated with a given company in the knowledge graph. Currently these edges describe trade relationships (\"trading_partners\"), while allowing filtering by recipient (\"receives_from\") or sender (\"sends_to\").
         * @summary Edges
         * @param {string} company_id An Altana Canonical Identifier
         * @param {Array<string>} [edge_type] A list of edge_type filters
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {string} [trade_direction] Filter trade-based edges on the direction of the trade
         * @param {number} [page] Page number to return from results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyEdges(company_id: string, edge_type?: Array<string>, country?: Array<string>, trade_direction?: string, page?: number, options?: any) {
            return CompanyApiFp(configuration).getCompanyEdges(company_id, edge_type, country, trade_direction, page, options)(fetch, basePath);
        },
        /**
         * The Company Facilities endpoint retrieves the facilities associated with a given company.
         * @summary Facilities
         * @param {string} company_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyFacilities(company_id: string, page?: number, options?: any) {
            return CompanyApiFp(configuration).getCompanyFacilities(company_id, page, options)(fetch, basePath);
        },
        /**
         * The Company Products endpoint retrieves the products that a given company sends or receives.
         * @summary Company Products
         * @param {string} company_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter products based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyProducts(company_id: string, trade_direction?: string, page?: number, options?: any) {
            return CompanyApiFp(configuration).getCompanyProducts(company_id, trade_direction, page, options)(fetch, basePath);
        },
        /**
         * The Trading Partners endpoint allows you to retrieve a paginated list of companies that buy from or sell to the company in question, along with information about those relationships.
         * @summary Trading Partners
         * @param {string} company_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingPartners(company_id: string, page?: number, options?: any) {
            return CompanyApiFp(configuration).getTradingPartners(company_id, page, options)(fetch, basePath);
        },
        /**
         * The Company Match Endpoint.
         * @summary Company Match
         * @param {string} query A company name
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {string} [full_address] The full address to search for
         * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
         * @param {boolean} [has_restrictions] Filter for companies that have restrictions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchCompany(query: string, country?: Array<string>, full_address?: string, hs2?: Array<string>, has_restrictions?: boolean, options?: any) {
            return CompanyApiFp(configuration).matchCompany(query, country, full_address, hs2, has_restrictions, options)(fetch, basePath);
        },
        /**
         * The Company Search endpoint allows users to search for companies by name. The endpoint returns the Altana IDs for companies matching that name, ordered by search relevance, as well as information on the company including: the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
         * @summary Company Search
         * @param {string} query A company name, variant, identifier, or query term
         * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
         * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
         * @param {boolean} [has_restrictions] Filter for companies that have restrictions
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCompany(query: string, country?: Array<string>, hs2?: Array<string>, has_restrictions?: boolean, page?: number, options?: any) {
            return CompanyApiFp(configuration).searchCompany(query, country, hs2, has_restrictions, page, options)(fetch, basePath);
        },
    };
};

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI {
    /**
     * The Company ID endpoint allows users to search for a company using its canonical Altana ID. The endpoint returns information on the company including the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
     * @summary Company ID
     * @param {string} company_id A company identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getCompanyById(company_id: string, options?: any) {
        return CompanyApiFp(this.configuration).getCompanyById(company_id, options)(this.fetch, this.basePath);
    }

    /**
     * The Edges endpoint retrieves the links (i.e., edges) associated with a given company in the knowledge graph. Currently these edges describe trade relationships (\"trading_partners\"), while allowing filtering by recipient (\"receives_from\") or sender (\"sends_to\").
     * @summary Edges
     * @param {string} company_id An Altana Canonical Identifier
     * @param {Array<string>} [edge_type] A list of edge_type filters
     * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
     * @param {string} [trade_direction] Filter trade-based edges on the direction of the trade
     * @param {number} [page] Page number to return from results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getCompanyEdges(company_id: string, edge_type?: Array<string>, country?: Array<string>, trade_direction?: string, page?: number, options?: any) {
        return CompanyApiFp(this.configuration).getCompanyEdges(company_id, edge_type, country, trade_direction, page, options)(this.fetch, this.basePath);
    }

    /**
     * The Company Facilities endpoint retrieves the facilities associated with a given company.
     * @summary Facilities
     * @param {string} company_id An Altana Canonical Identifier
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getCompanyFacilities(company_id: string, page?: number, options?: any) {
        return CompanyApiFp(this.configuration).getCompanyFacilities(company_id, page, options)(this.fetch, this.basePath);
    }

    /**
     * The Company Products endpoint retrieves the products that a given company sends or receives.
     * @summary Company Products
     * @param {string} company_id An Altana Canonical Identifier
     * @param {string} [trade_direction] Filter products based on the direction of the trade
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getCompanyProducts(company_id: string, trade_direction?: string, page?: number, options?: any) {
        return CompanyApiFp(this.configuration).getCompanyProducts(company_id, trade_direction, page, options)(this.fetch, this.basePath);
    }

    /**
     * The Trading Partners endpoint allows you to retrieve a paginated list of companies that buy from or sell to the company in question, along with information about those relationships.
     * @summary Trading Partners
     * @param {string} company_id An Altana Canonical Identifier
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public getTradingPartners(company_id: string, page?: number, options?: any) {
        return CompanyApiFp(this.configuration).getTradingPartners(company_id, page, options)(this.fetch, this.basePath);
    }

    /**
     * The Company Match Endpoint.
     * @summary Company Match
     * @param {string} query A company name
     * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
     * @param {string} [full_address] The full address to search for
     * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
     * @param {boolean} [has_restrictions] Filter for companies that have restrictions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public matchCompany(query: string, country?: Array<string>, full_address?: string, hs2?: Array<string>, has_restrictions?: boolean, options?: any) {
        return CompanyApiFp(this.configuration).matchCompany(query, country, full_address, hs2, has_restrictions, options)(this.fetch, this.basePath);
    }

    /**
     * The Company Search endpoint allows users to search for companies by name. The endpoint returns the Altana IDs for companies matching that name, ordered by search relevance, as well as information on the company including: the products it trades, its industries, its buyers and suppliers, the risks and restrictions (i.e., sanctions, export controls, etc.) associated with the company, and the volume of trade associated with the company (via \"number_records\").
     * @summary Company Search
     * @param {string} query A company name, variant, identifier, or query term
     * @param {Array<string>} [country] A list of ISO-2 country codes to filter by
     * @param {Array<string>} [hs2] A list of HS2 product categories to filter by
     * @param {boolean} [has_restrictions] Filter for companies that have restrictions
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public searchCompany(query: string, country?: Array<string>, hs2?: Array<string>, has_restrictions?: boolean, page?: number, options?: any) {
        return CompanyApiFp(this.configuration).searchCompany(query, country, hs2, has_restrictions, page, options)(this.fetch, this.basePath);
    }

}
/**
 * FacilityApi - fetch parameter creator
 * @export
 */
export const FacilityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Facility ID endpoint allows users to search for a facility using its canonical Altana ID. The endpoint returns information on the facility including the company associated with the facility, the products it trades, its industries, facilities it sends to or receives from, and the volume of trade associated with the facility (via \"number_records\").
         * @summary Facility ID
         * @param {string} facility_id A facility identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityById(facility_id: string, options: any = {}): FetchArgs {
            // verify required parameter 'facility_id' is not null or undefined
            if (facility_id === null || facility_id === undefined) {
                throw new RequiredError('facility_id','Required parameter facility_id was null or undefined when calling getFacilityById.');
            }
            const localVarPath = `/facility/id/{facility_id}`
                .replace(`{${"facility_id"}}`, encodeURIComponent(String(facility_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Facility Products endpoint retrieves the products that a given facility sends or receives.
         * @summary Facility Products
         * @param {string} facility_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter products based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityProducts(facility_id: string, trade_direction?: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'facility_id' is not null or undefined
            if (facility_id === null || facility_id === undefined) {
                throw new RequiredError('facility_id','Required parameter facility_id was null or undefined when calling getFacilityProducts.');
            }
            const localVarPath = `/facility/id/{facility_id}/products`
                .replace(`{${"facility_id"}}`, encodeURIComponent(String(facility_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (trade_direction !== undefined) {
                localVarQueryParameter['trade_direction'] = trade_direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Trading Partners endpoint allows you to retrieve a paginated list of facilities that send to or receive products from the facility in question, along with information about those relationships.
         * @summary Facility Trading Partners
         * @param {string} facility_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityTradingPartners(facility_id: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'facility_id' is not null or undefined
            if (facility_id === null || facility_id === undefined) {
                throw new RequiredError('facility_id','Required parameter facility_id was null or undefined when calling getFacilityTradingPartners.');
            }
            const localVarPath = `/facility/id/{facility_id}/trading-partners`
                .replace(`{${"facility_id"}}`, encodeURIComponent(String(facility_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Facility Match.
         * @summary Facility Match
         * @param {string} company_name The company name to search for
         * @param {string} full_address The full address or valid GeoJson Polygon to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchFacility(company_name: string, full_address: string, options: any = {}): FetchArgs {
            // verify required parameter 'company_name' is not null or undefined
            if (company_name === null || company_name === undefined) {
                throw new RequiredError('company_name','Required parameter company_name was null or undefined when calling matchFacility.');
            }
            // verify required parameter 'full_address' is not null or undefined
            if (full_address === null || full_address === undefined) {
                throw new RequiredError('full_address','Required parameter full_address was null or undefined when calling matchFacility.');
            }
            const localVarPath = `/facility/match`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (company_name !== undefined) {
                localVarQueryParameter['company_name'] = company_name;
            }

            if (full_address !== undefined) {
                localVarQueryParameter['full_address'] = full_address;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Facility Search.
         * @summary Facility Search
         * @param {string} full_address The full address or valid GeoJson Polygon to search for
         * @param {string} company_name The company name to search for
         * @param {number} [page] The Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFacility(full_address: string, company_name: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'full_address' is not null or undefined
            if (full_address === null || full_address === undefined) {
                throw new RequiredError('full_address','Required parameter full_address was null or undefined when calling searchFacility.');
            }
            // verify required parameter 'company_name' is not null or undefined
            if (company_name === null || company_name === undefined) {
                throw new RequiredError('company_name','Required parameter company_name was null or undefined when calling searchFacility.');
            }
            const localVarPath = `/facility/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (full_address !== undefined) {
                localVarQueryParameter['full_address'] = full_address;
            }

            if (company_name !== undefined) {
                localVarQueryParameter['company_name'] = company_name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FacilityApi - functional programming interface
 * @export
 */
export const FacilityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The Facility ID endpoint allows users to search for a facility using its canonical Altana ID. The endpoint returns information on the facility including the company associated with the facility, the products it trades, its industries, facilities it sends to or receives from, and the volume of trade associated with the facility (via \"number_records\").
         * @summary Facility ID
         * @param {string} facility_id A facility identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityById(facility_id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Facility> {
            const localVarFetchArgs = FacilityApiFetchParamCreator(configuration).getFacilityById(facility_id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Facility Products endpoint retrieves the products that a given facility sends or receives.
         * @summary Facility Products
         * @param {string} facility_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter products based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityProducts(facility_id: string, trade_direction?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Products> {
            const localVarFetchArgs = FacilityApiFetchParamCreator(configuration).getFacilityProducts(facility_id, trade_direction, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Trading Partners endpoint allows you to retrieve a paginated list of facilities that send to or receive products from the facility in question, along with information about those relationships.
         * @summary Facility Trading Partners
         * @param {string} facility_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityTradingPartners(facility_id: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FacilityTradingPartners> {
            const localVarFetchArgs = FacilityApiFetchParamCreator(configuration).getFacilityTradingPartners(facility_id, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Facility Match.
         * @summary Facility Match
         * @param {string} company_name The company name to search for
         * @param {string} full_address The full address or valid GeoJson Polygon to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchFacility(company_name: string, full_address: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Facility> {
            const localVarFetchArgs = FacilityApiFetchParamCreator(configuration).matchFacility(company_name, full_address, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Facility Search.
         * @summary Facility Search
         * @param {string} full_address The full address or valid GeoJson Polygon to search for
         * @param {string} company_name The company name to search for
         * @param {number} [page] The Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFacility(full_address: string, company_name: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Facilities> {
            const localVarFetchArgs = FacilityApiFetchParamCreator(configuration).searchFacility(full_address, company_name, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FacilityApi - factory interface
 * @export
 */
export const FacilityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * The Facility ID endpoint allows users to search for a facility using its canonical Altana ID. The endpoint returns information on the facility including the company associated with the facility, the products it trades, its industries, facilities it sends to or receives from, and the volume of trade associated with the facility (via \"number_records\").
         * @summary Facility ID
         * @param {string} facility_id A facility identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityById(facility_id: string, options?: any) {
            return FacilityApiFp(configuration).getFacilityById(facility_id, options)(fetch, basePath);
        },
        /**
         * The Facility Products endpoint retrieves the products that a given facility sends or receives.
         * @summary Facility Products
         * @param {string} facility_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter products based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityProducts(facility_id: string, trade_direction?: string, page?: number, options?: any) {
            return FacilityApiFp(configuration).getFacilityProducts(facility_id, trade_direction, page, options)(fetch, basePath);
        },
        /**
         * The Trading Partners endpoint allows you to retrieve a paginated list of facilities that send to or receive products from the facility in question, along with information about those relationships.
         * @summary Facility Trading Partners
         * @param {string} facility_id An Altana Canonical Identifier
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFacilityTradingPartners(facility_id: string, page?: number, options?: any) {
            return FacilityApiFp(configuration).getFacilityTradingPartners(facility_id, page, options)(fetch, basePath);
        },
        /**
         * Facility Match.
         * @summary Facility Match
         * @param {string} company_name The company name to search for
         * @param {string} full_address The full address or valid GeoJson Polygon to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchFacility(company_name: string, full_address: string, options?: any) {
            return FacilityApiFp(configuration).matchFacility(company_name, full_address, options)(fetch, basePath);
        },
        /**
         * Facility Search.
         * @summary Facility Search
         * @param {string} full_address The full address or valid GeoJson Polygon to search for
         * @param {string} company_name The company name to search for
         * @param {number} [page] The Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFacility(full_address: string, company_name: string, page?: number, options?: any) {
            return FacilityApiFp(configuration).searchFacility(full_address, company_name, page, options)(fetch, basePath);
        },
    };
};

/**
 * FacilityApi - object-oriented interface
 * @export
 * @class FacilityApi
 * @extends {BaseAPI}
 */
export class FacilityApi extends BaseAPI {
    /**
     * The Facility ID endpoint allows users to search for a facility using its canonical Altana ID. The endpoint returns information on the facility including the company associated with the facility, the products it trades, its industries, facilities it sends to or receives from, and the volume of trade associated with the facility (via \"number_records\").
     * @summary Facility ID
     * @param {string} facility_id A facility identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getFacilityById(facility_id: string, options?: any) {
        return FacilityApiFp(this.configuration).getFacilityById(facility_id, options)(this.fetch, this.basePath);
    }

    /**
     * The Facility Products endpoint retrieves the products that a given facility sends or receives.
     * @summary Facility Products
     * @param {string} facility_id An Altana Canonical Identifier
     * @param {string} [trade_direction] Filter products based on the direction of the trade
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getFacilityProducts(facility_id: string, trade_direction?: string, page?: number, options?: any) {
        return FacilityApiFp(this.configuration).getFacilityProducts(facility_id, trade_direction, page, options)(this.fetch, this.basePath);
    }

    /**
     * The Trading Partners endpoint allows you to retrieve a paginated list of facilities that send to or receive products from the facility in question, along with information about those relationships.
     * @summary Facility Trading Partners
     * @param {string} facility_id An Altana Canonical Identifier
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getFacilityTradingPartners(facility_id: string, page?: number, options?: any) {
        return FacilityApiFp(this.configuration).getFacilityTradingPartners(facility_id, page, options)(this.fetch, this.basePath);
    }

    /**
     * Facility Match.
     * @summary Facility Match
     * @param {string} company_name The company name to search for
     * @param {string} full_address The full address or valid GeoJson Polygon to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public matchFacility(company_name: string, full_address: string, options?: any) {
        return FacilityApiFp(this.configuration).matchFacility(company_name, full_address, options)(this.fetch, this.basePath);
    }

    /**
     * Facility Search.
     * @summary Facility Search
     * @param {string} full_address The full address or valid GeoJson Polygon to search for
     * @param {string} company_name The company name to search for
     * @param {number} [page] The Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public searchFacility(full_address: string, company_name: string, page?: number, options?: any) {
        return FacilityApiFp(this.configuration).searchFacility(full_address, company_name, page, options)(this.fetch, this.basePath);
    }

}
/**
 * ProductApi - fetch parameter creator
 * @export
 */
export const ProductApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Product ID endpoint allows users to search for a product using its canonical Altana ID.
         * @summary Product ID
         * @param {string} product_id A product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(product_id: string, options: any = {}): FetchArgs {
            // verify required parameter 'product_id' is not null or undefined
            if (product_id === null || product_id === undefined) {
                throw new RequiredError('product_id','Required parameter product_id was null or undefined when calling getProductById.');
            }
            const localVarPath = `/product/id/{product_id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(product_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Product Companies endpoint retrieves the companies that send or receive a given product.
         * @summary Product Companies
         * @param {string} product_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter companies based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCompanies(product_id: string, trade_direction?: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'product_id' is not null or undefined
            if (product_id === null || product_id === undefined) {
                throw new RequiredError('product_id','Required parameter product_id was null or undefined when calling getProductCompanies.');
            }
            const localVarPath = `/product/id/{product_id}/companies`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(product_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (trade_direction !== undefined) {
                localVarQueryParameter['trade_direction'] = trade_direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Product Facilities endpoint retrieves the facilities that send or receive a given product.
         * @summary Product Facilities
         * @param {string} product_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter facilities based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFacilities(product_id: string, trade_direction?: string, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'product_id' is not null or undefined
            if (product_id === null || product_id === undefined) {
                throw new RequiredError('product_id','Required parameter product_id was null or undefined when calling getProductFacilities.');
            }
            const localVarPath = `/product/id/{product_id}/facilities`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(product_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            if (trade_direction !== undefined) {
                localVarQueryParameter['trade_direction'] = trade_direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The Product ID endpoint allows users to search for a product using its canonical Altana ID.
         * @summary Product ID
         * @param {string} product_id A product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(product_id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Product> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductById(product_id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Product Companies endpoint retrieves the companies that send or receive a given product.
         * @summary Product Companies
         * @param {string} product_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter companies based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCompanies(product_id: string, trade_direction?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Companies> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductCompanies(product_id, trade_direction, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The Product Facilities endpoint retrieves the facilities that send or receive a given product.
         * @summary Product Facilities
         * @param {string} product_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter facilities based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFacilities(product_id: string, trade_direction?: string, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Facilities> {
            const localVarFetchArgs = ProductApiFetchParamCreator(configuration).getProductFacilities(product_id, trade_direction, page, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * The Product ID endpoint allows users to search for a product using its canonical Altana ID.
         * @summary Product ID
         * @param {string} product_id A product identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductById(product_id: string, options?: any) {
            return ProductApiFp(configuration).getProductById(product_id, options)(fetch, basePath);
        },
        /**
         * The Product Companies endpoint retrieves the companies that send or receive a given product.
         * @summary Product Companies
         * @param {string} product_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter companies based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCompanies(product_id: string, trade_direction?: string, page?: number, options?: any) {
            return ProductApiFp(configuration).getProductCompanies(product_id, trade_direction, page, options)(fetch, basePath);
        },
        /**
         * The Product Facilities endpoint retrieves the facilities that send or receive a given product.
         * @summary Product Facilities
         * @param {string} product_id An Altana Canonical Identifier
         * @param {string} [trade_direction] Filter facilities based on the direction of the trade
         * @param {number} [page] Page number to return from results (0-99)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductFacilities(product_id: string, trade_direction?: string, page?: number, options?: any) {
            return ProductApiFp(configuration).getProductFacilities(product_id, trade_direction, page, options)(fetch, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * The Product ID endpoint allows users to search for a product using its canonical Altana ID.
     * @summary Product ID
     * @param {string} product_id A product identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductById(product_id: string, options?: any) {
        return ProductApiFp(this.configuration).getProductById(product_id, options)(this.fetch, this.basePath);
    }

    /**
     * The Product Companies endpoint retrieves the companies that send or receive a given product.
     * @summary Product Companies
     * @param {string} product_id An Altana Canonical Identifier
     * @param {string} [trade_direction] Filter companies based on the direction of the trade
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductCompanies(product_id: string, trade_direction?: string, page?: number, options?: any) {
        return ProductApiFp(this.configuration).getProductCompanies(product_id, trade_direction, page, options)(this.fetch, this.basePath);
    }

    /**
     * The Product Facilities endpoint retrieves the facilities that send or receive a given product.
     * @summary Product Facilities
     * @param {string} product_id An Altana Canonical Identifier
     * @param {string} [trade_direction] Filter facilities based on the direction of the trade
     * @param {number} [page] Page number to return from results (0-99)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductFacilities(product_id: string, trade_direction?: string, page?: number, options?: any) {
        return ProductApiFp(this.configuration).getProductFacilities(product_id, trade_direction, page, options)(this.fetch, this.basePath);
    }

}
/**
 * StatusApi - fetch parameter creator
 * @export
 */
export const StatusApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the status of the deployment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options: any = {}): FetchArgs {
            const localVarPath = `/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the status of the deployment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Status> {
            const localVarFetchArgs = StatusApiFetchParamCreator(configuration).getStatus(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get the status of the deployment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any) {
            return StatusApiFp(configuration).getStatus(options)(fetch, basePath);
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * Get the status of the deployment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public getStatus(options?: any) {
        return StatusApiFp(this.configuration).getStatus(options)(this.fetch, this.basePath);
    }

}
/**
 * TransactionApi - fetch parameter creator
 * @export
 */
export const TransactionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Transaction Risk endpoint takes in details from a shipping transaction (i.e., a customs declaration, manifest, bill of lading, etc.) in a standard json format and returns an array of risks associated with that transaction.  The base risks that Altana returns currently in this endpoint include security risk, narcotics risk, and money laundering risk.  The risks are returned in an array to allow easy extensibility.  More risks calibrated to the country at hand, such as fiscal (tax evasion) risks, supervised models trained on enforcement results, and anomaly detection models, are easily added without breaking integrations.  The minimum required input fields for this endpoint are \"goods_description,\" \"hs_code,\" and the countries of origin and destination (ISO-2 codes).
         * @summary Transaction Risk
         * @param {TransactionRecord} [body] Cross-Border Transaction Records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionRisk(body?: TransactionRecord, options: any = {}): FetchArgs {
            const localVarPath = `/transaction/risk`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TransactionRecord" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The Transaction Risk endpoint takes in details from a shipping transaction (i.e., a customs declaration, manifest, bill of lading, etc.) in a standard json format and returns an array of risks associated with that transaction.  The base risks that Altana returns currently in this endpoint include security risk, narcotics risk, and money laundering risk.  The risks are returned in an array to allow easy extensibility.  More risks calibrated to the country at hand, such as fiscal (tax evasion) risks, supervised models trained on enforcement results, and anomaly detection models, are easily added without breaking integrations.  The minimum required input fields for this endpoint are \"goods_description,\" \"hs_code,\" and the countries of origin and destination (ISO-2 codes).
         * @summary Transaction Risk
         * @param {TransactionRecord} [body] Cross-Border Transaction Records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionRisk(body?: TransactionRecord, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TransactionRisk> {
            const localVarFetchArgs = TransactionApiFetchParamCreator(configuration).transactionRisk(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * The Transaction Risk endpoint takes in details from a shipping transaction (i.e., a customs declaration, manifest, bill of lading, etc.) in a standard json format and returns an array of risks associated with that transaction.  The base risks that Altana returns currently in this endpoint include security risk, narcotics risk, and money laundering risk.  The risks are returned in an array to allow easy extensibility.  More risks calibrated to the country at hand, such as fiscal (tax evasion) risks, supervised models trained on enforcement results, and anomaly detection models, are easily added without breaking integrations.  The minimum required input fields for this endpoint are \"goods_description,\" \"hs_code,\" and the countries of origin and destination (ISO-2 codes).
         * @summary Transaction Risk
         * @param {TransactionRecord} [body] Cross-Border Transaction Records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionRisk(body?: TransactionRecord, options?: any) {
            return TransactionApiFp(configuration).transactionRisk(body, options)(fetch, basePath);
        },
    };
};

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
    /**
     * The Transaction Risk endpoint takes in details from a shipping transaction (i.e., a customs declaration, manifest, bill of lading, etc.) in a standard json format and returns an array of risks associated with that transaction.  The base risks that Altana returns currently in this endpoint include security risk, narcotics risk, and money laundering risk.  The risks are returned in an array to allow easy extensibility.  More risks calibrated to the country at hand, such as fiscal (tax evasion) risks, supervised models trained on enforcement results, and anomaly detection models, are easily added without breaking integrations.  The minimum required input fields for this endpoint are \"goods_description,\" \"hs_code,\" and the countries of origin and destination (ISO-2 codes).
     * @summary Transaction Risk
     * @param {TransactionRecord} [body] Cross-Border Transaction Records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApi
     */
    public transactionRisk(body?: TransactionRecord, options?: any) {
        return TransactionApiFp(this.configuration).transactionRisk(body, options)(this.fetch, this.basePath);
    }

}
